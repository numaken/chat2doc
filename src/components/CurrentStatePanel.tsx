'use client'

import { Target, CheckCircle, AlertTriangle, ArrowRight, Download, Copy, Code, Lightbulb, AlertCircle } from 'lucide-react'

interface CurrentStatePanelProps {
  projectId: string
  conversations: Conversation[]
}

interface Conversation {
  id: string
  projectId: string
  originalText: string
  structuredData: {
    purpose: string
    progress: string[]
    challenges: string[]
    nextActions: string[]
    code?: Array<{
      fileName?: string
      description?: string
      snippet?: string
    }>
    intentions?: string[]
    concerns?: string[]
  }
  metadata: {
    model: string
    tokens?: number
    chunks?: number
    totalChars?: number
    timestamp: string
  }
  timestamp: string
}

export default function CurrentStatePanel({ projectId, conversations }: CurrentStatePanelProps) {
  const latestConversation = conversations[conversations.length - 1]
  const structuredData = latestConversation?.structuredData

  if (!structuredData) {
    return (
      <div className="w-96 bg-white border-l border-gray-200 p-6">
        <div className="text-center text-gray-500">
          <Target className="w-12 h-12 mx-auto mb-4 text-gray-300" />
          <h3 className="font-medium mb-2">現在地パネル</h3>
          <p className="text-sm">
            会話を構造化すると、プロジェクトの現在地が表示されます
          </p>
        </div>
      </div>
    )
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  const exportMarkdown = () => {
    const markdown = `# プロジェクト - 現在地レポート

## 📌 目的
${structuredData.purpose}

## ✅ 対応履歴
${structuredData.progress?.map((item: string) => `- ${item}`).join('\n') || ''}

## ⚠️ 課題
${structuredData.challenges?.map((item: string) => `- ${item}`).join('\n') || ''}

## 🔄 次のアクション
${structuredData.nextActions?.map((item: string) => `- ${item}`).join('\n') || ''}

## 💻 コード
${structuredData.code?.map((item: { fileName?: string; description?: string; snippet?: string }) => `### ${item.fileName || 'コード'}
${item.description || ''}
\`\`\`
${item.snippet || ''}
\`\`\`
`).join('\n') || ''}

## 💡 設計意図
${structuredData.intentions?.map((item: string) => `- ${item}`).join('\n') || ''}

## ⚠️ 技術的懸念点
${structuredData.concerns?.map((item: string) => `- ${item}`).join('\n') || ''}

---
*Generated by Chat2Doc β版 - ${new Date().toLocaleString('ja-JP')}*
`
    
    const blob = new Blob([markdown], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${projectId}-current-state.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="w-full xl:w-96 bg-white flex flex-col">
      {/* ヘッダー */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <h2 className="font-semibold text-gray-900">現在地パネル</h2>
          <div className="flex gap-2">
            <button
              onClick={() => copyToClipboard(JSON.stringify(structuredData, null, 2))}
              className="p-1.5 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md transition-colors"
              title="コピー"
            >
              <Copy className="w-4 h-4" />
            </button>
            <button
              onClick={exportMarkdown}
              className="p-1.5 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md transition-colors"
              title="Markdownエクスポート"
            >
              <Download className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* メインコンテンツ */}
      <div className="flex-1 p-3 sm:p-4 space-y-4 sm:space-y-6 overflow-y-auto">
        {/* 目的セクション */}
        <div>
          <div className="flex items-center gap-2 mb-3">
            <Target className="w-5 h-5 text-blue-600" />
            <h3 className="font-semibold text-gray-900">目的</h3>
          </div>
          <p className="text-sm text-gray-700 bg-blue-50 p-3 rounded-lg border-l-4 border-blue-600">
            {structuredData.purpose}
          </p>
        </div>

        {/* 対応履歴セクション */}
        <div>
          <div className="flex items-center gap-2 mb-3">
            <CheckCircle className="w-5 h-5 text-green-600" />
            <h3 className="font-semibold text-gray-900">対応履歴</h3>
          </div>
          <div className="space-y-2">
            {structuredData.progress.map((item: string, index: number) => (
              <div key={index} className="flex items-start gap-2 text-sm">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                <p className="text-gray-700">{item}</p>
              </div>
            ))}
          </div>
        </div>

        {/* 課題セクション */}
        <div>
          <div className="flex items-center gap-2 mb-3">
            <AlertTriangle className="w-5 h-5 text-amber-600" />
            <h3 className="font-semibold text-gray-900">課題</h3>
          </div>
          <div className="space-y-2">
            {structuredData.challenges.map((item: string, index: number) => (
              <div key={index} className="flex items-start gap-2 text-sm">
                <div className="w-2 h-2 bg-amber-500 rounded-full mt-2 flex-shrink-0"></div>
                <p className="text-gray-700">{item}</p>
              </div>
            ))}
          </div>
        </div>

        {/* 次のアクションセクション */}
        <div>
          <div className="flex items-center gap-2 mb-3">
            <ArrowRight className="w-5 h-5 text-purple-600" />
            <h3 className="font-semibold text-gray-900">次のアクション</h3>
          </div>
          <div className="space-y-2">
            {structuredData.nextActions.map((item: string, index: number) => (
              <div key={index} className="flex items-start gap-2 text-sm">
                <div className="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0"></div>
                <p className="text-gray-700">{item}</p>
              </div>
            ))}
          </div>
        </div>

        {/* コードセクション */}
        {structuredData.code && structuredData.code.length > 0 && (
          <div>
            <div className="flex items-center gap-2 mb-3">
              <Code className="w-5 h-5 text-cyan-600" />
              <h3 className="font-semibold text-gray-900">コード</h3>
            </div>
            <div className="space-y-3">
              {structuredData.code.map((item: { fileName?: string; description?: string; snippet?: string }, index: number) => (
                <div key={index} className="bg-gray-50 rounded-lg p-3 border border-gray-200">
                  {item.fileName && (
                    <div className="text-xs font-mono text-cyan-600 mb-1">{item.fileName}</div>
                  )}
                  {item.description && (
                    <p className="text-xs text-gray-600 mb-2">{item.description}</p>
                  )}
                  {item.snippet && (
                    <pre className="text-xs bg-gray-900 text-gray-100 p-2 rounded overflow-x-auto">
                      <code>{item.snippet}</code>
                    </pre>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* 設計意図セクション */}
        {structuredData.intentions && structuredData.intentions.length > 0 && (
          <div>
            <div className="flex items-center gap-2 mb-3">
              <Lightbulb className="w-5 h-5 text-yellow-600" />
              <h3 className="font-semibold text-gray-900">設計意図</h3>
            </div>
            <div className="space-y-2">
              {structuredData.intentions.map((item: string, index: number) => (
                <div key={index} className="flex items-start gap-2 text-sm">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2 flex-shrink-0"></div>
                  <p className="text-gray-700">{item}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* 技術的懸念点セクション */}
        {structuredData.concerns && structuredData.concerns.length > 0 && (
          <div>
            <div className="flex items-center gap-2 mb-3">
              <AlertCircle className="w-5 h-5 text-red-600" />
              <h3 className="font-semibold text-gray-900">技術的懸念点</h3>
            </div>
            <div className="space-y-2">
              {structuredData.concerns.map((item: string, index: number) => (
                <div key={index} className="flex items-start gap-2 text-sm">
                  <div className="w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0"></div>
                  <p className="text-gray-700">{item}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* フッター */}
      <div className="p-4 border-t border-gray-200">
        <div className="text-xs text-gray-500 text-center">
          <p>最終更新: {new Date(latestConversation.timestamp).toLocaleString('ja-JP')}</p>
          <p className="mt-1">Chat2Doc β版で生成</p>
        </div>
      </div>
    </div>
  )
}